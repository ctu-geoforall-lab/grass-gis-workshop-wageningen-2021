[Part 2] Time series data processing
====================================

GRASS GIS offers high quality tools for spatio-temporal data
processing, see :grasscmd:`GRASS documentation <temporalintro>` for
details.

GRASS introduces three special datatypes that are designed to handle
time series data:

* *Space time raster datasets* (``strds``) for managing raster map
  time series.
* *Space time 3D raster datasets* (``str3ds``) for managing 3D raster
  map time series.
* *Space time vector datasets* (``stvds``) for managing vector map time
  series.

Import Sentinel scenes
----------------------

.. todo:: move to u20
          
Create a new mapset in *odse_sentinel* location, eg. *t-ndvi*
(:menuselection:`Settings --> GRASS working enviroment --> Create new
mapset`).

.. todo:: add icon (data tab)

Data can be imported by :grasscmd:`i.sentinel.import` similarly as
done in :doc:`20`. At fisrt check list of bands to be imported by
:param:`-p` flag. By :param:`pattern` on bands (4th and 8th) needed
for NDVI computation will be selected.

.. code-block:: bash

   i.sentinel.import -p input=/home/user/geodata/sentinel/2019 pattern="B0(4|8)_10m"
   
It's useful to provide also :option:`register_output` which be later
used in order to create space-time dataset from imported Sentinel data.

.. code-block:: bash

   i.sentinel.import -l -c input=/home/user/geodata/sentinel/2019 pattern="B0(4|8)_10m" register_output=/home/user/sentinel-timestamps.txt

   Example

   ::

      T32UPB_20190407T102021_B04_10m|2019-04-07 10:26:45.035007|S2_4
      T32UPB_20190407T102021_B08_10m|2019-04-07 10:26:45.035007|S2_8
      T32UPB_20190422T102029_B04_10m|2019-04-22 10:26:50.312683|S2_4
      ...

At this moment a new space time dataset can be created by
:grasscmd:`t.create` and all imported Sentinel bands registered by
:grasscmd:`t.register`.

.. code-block:: bash

   t.create output=sen_tile_5606 title="Sentinel L2A 2021" desc="Tile 5606"
   t.register input=sen_tile_5606 file=/home/user/sentinel-timestamps.txt

Let's check basic metadata (:grasscmd:`t.info`) and list of registered
maps (:grasscmd:`t.rast.list`).

.. code-block:: bash

   t.info input=sen_tile_5606

::

   ...
   | Start time:................. 2019-04-07 10:26:45.035007
   | End time:................... 2019-10-14 10:26:46.742599
   ...
   | Number of registered maps:.. 14

.. code-block:: bash

   t.rast.list input=sen_tile_5606

::

   name|mapset|start_time|end_time
   T32UPB_20190407T102021_B04_10m|sen_tile_5606|2019-04-07 10:26:45.035007|None
   T32UPB_20190407T102021_B08_10m|sen_tile_5606|2019-04-07 10:26:45.035007|None
   T32UPB_20190417T102031_B04_10m|sen_tile_5606|2019-04-17 10:26:46.415802|None
   ...

NDVI ST computation
-------------------

For NDVI computation 4th and 8th bands are required (:doc:`05`). Map
algebra is performed in the case of spatio-temporal data by
:grasscmd:`t.rast.mapcalc` which requires data separated into
spatio-temporal datasets (see example in :doc:`22`). Such datasets can
be prepared by :grasscmd:`t.rast.extract`.

.. code-block:: bash

   t.rast.extract input=sen_tile_5606 where="name like '%B04%'" output=b4
   t.rast.extract input=sen_tile_5606 where="name like '%B08%'" output=b8

Let's check content of the new datasets by :grasscmd:`t.rast.list`.

.. code-block:: bash

   t.rast.list input=b4
   t.rast.list input=b8

Set computational region by :grasscmd:`g.region` including mask for
area of interest by :grasscmd:`r.mask`.

.. code-block:: bash

   g.region vector=jena_boundary align=T32UPB_20190407T102021_B04_10m
   r.mask vector=jena_boundary

NDVI (see :doc:`05`) computation on spatio-temporal datasets can be
performed in parallel (:param:`nproc`).
          
.. code-block:: bash

   t.rast.mapcalc input=b4,b8 output=ndvi \
   expression="float(b8 - b4) / ( b8 + b4 )" \
   basename=ndvi nproc=3

.. note:: In GRASS GIS 7.9 due to band reference support the
   computation is much more straighforward.

   .. code-block:: bash
                   
      t.rast.mapcalc inputs=sen_tile_5606.S2_8,sen_tile_5606.S2_4 output=ndvi basename=ndvi \
      expression="float(sen_tile_5606.S2_8 - sen_tile_5606.S2_4) / (sen_tile_5606.S2_8 + sen_tile_5606.S2_4)"

When computation is finished *ndvi* color table can be by
:grasscmd:`t.rast.colors`.

.. code-block:: bash

   t.rast.colors input=ndvi color=ndvi

..
   .. figure:: ../images/units/21/simple-animation.gif
      :class: middle

      Simple NDVI animation (no clouds mask applied) created by
      :grasscmd:`g.gui.animation`.

.. note:: Load data as multiple raster maps instead of space time
          dataset. There is problem with sampling related to trick
          with endtime mentioned above.

Cloud mask
^^^^^^^^^^

Let's apply cloud mask on space-time dataset. At first we will create
a new space-time dataset containing computed raster masks. A sample
Python script has been designed for this purpose below. Such mask can
be created by :grasscmd:`r.mask`, see line :lcode:`30`. But in this
case a mask should be kept for further usage. Note that
:grasscmd:`r.mask` module produces normal raster map with unique name
*MASK*. To disable mask it is enough to rename *MASK* map by
:grasscmd:`g.rename`, see line :lcode:`43`.

.. literalinclude:: ../_static/scripts/sentinel-cloud-mask.py
   :language: python
   :linenos:
   :emphasize-lines: 30, 43

Sample script to download: `sentinel-cloud-mask.py
<../_static/scripts/sentinel-cloud-mask.py>`__
	     
.. code-block:: bash
		
   sentinel-cloud-mask.py map=jena_boundary output=cloud-timestamps.txt

Now we can create a new space time dataset with raster cloud masks
registered.

.. code-block:: bash

   t.create output=clouds title="Sentinel L2A 2019 (clouds)" desc="Jena region"
   t.register input=clouds file=cloud-timestamps.txt

And apply modified expression for map algebra.

.. code-block:: bash

   t.rast.mapcalc input=b4,b8,clouds output=ndvi \
   expression="ndvi = if(isnull(clouds), null(), float(b8 - b4) / ( b8 + b4 ))" \
   basename=ndvi nproc=3

   t.rast.colors in=ndvi color=ndvi

..
   .. figure:: ../images/units/21/simple-animation-clouds.gif
      :class: middle

      Simple NDVI animation with clouds mask applied.
