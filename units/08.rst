[Part 2] Temporal Framework Python API
======================================

.. todo:: TO BE UPDATED

GRASS offers Python API for :grasscmd2:`space-time processing
<libpython/temporal_framework.html>`. The usage is presented on script
described below.

NDVI values range from +1.0 to -1.0. Areas of barren rock, sand, or
snow usually show very low NDVI values (for example, 0.1 or
less). Sparse vegetation such as shrubs and grasslands or senescing
crops may result in moderate NDVI values (approximately 0.2 to
0.5). High NDVI values (approximately 0.6 to 0.9) correspond to dense
vegetation such as that found in temperate and tropical forests or
crops at their peak growth stage. Let's classify NDVI into 3 major
classes:

* Class 1: from -1.0 to 0.2
* Class 2: from 0.2 to 0.6
* Class 3: from 0.6 to 1.0

The desired output will be a vector map with NDVI classes. Let's also
eliminate small areas.

Workflow:

#. Erase cloud mask in input region (:grasscmd:`v.overlay`: ``not`` operator)
#. Set computation region based on modified input region (:grasscmd:`g.region`)
#. Set mask (:grasscmd:`r.mask`)
#. Compute NDVI values (:grasscmd:`i.vi`)
#. Reclassify NDVI values into classes (:grasscmd:`r.recode`)
#. Set a reasonable color table for raster map classes (:grasscmd:`r.colors`)
#. Convert raster classes into vector areas (:grasscmd:`r.to.vect`)
#. Remove small areas (join them with adjacent areas by :grasscmd:`v.clean`)

Overview of corresponding commands:

.. code-block:: bash

   g.region vector=region_mask align=L2A_T32UPB_20170706T102021_B04_10m
   r.mask vector=region_mask
   i.vi red=L2A_T32UPB_20170706T102021_B04_10m output=ndvi nir=L2A_T32UPB_20170706T102021_B08_10m
   r.recode input=ndvi output=ndvi_class rules=reclass.txt
   r.colors map=ndvi_class rules=colors.txt
   r.to.vect -s -v input=ndvi_class output=ndvi_class type=area
   v.clean input=ndvi_class output=ndvi_vector tool=rmarea threshold=1600

At the end NDVI zonal statistics for each class will be computed:

* zonal statistics can be computed by :grasscmd:`v.rast.stats` and
  stored in attribute table
* attributes can be printed by :grasscmd:`v.db.select`

Let's define input and output parameters of the script:

* :param:`b4` - Name of input 4th band space time raster dataset (line
  :lcode:`19`)
* :param:`b8` - Name of input 8th band space time raster dataset (line
  :lcode:`23`)
* :param:`clouds` - Name of the input mask (region+clouds) space time raster dataset
  (line :lcode:`27`)
* :param:`clouds` - Name for output stats file (line :lcode:`30`)
* :param:`basename` - Basename for output raster maps (line
  :lcode:`33`)
* :param:`threshold` - Threshold for removing small areas (line
  :lcode:`38`)

.. _temporal-api:

List on functions used from :grasscmd2:`GRASS GIS Temporal Framework
<libpython/temporal_framework.html>` Python API:

* initialization must be done by :grasscmd2:`init
  <libpython/temporal.html#temporal.core.init>` function, see line
  :lcode:`138`
* space time datasets are open on lines :lcode:`140-142` by
  :grasscmd2:`open_old_stds
  <libpython/temporal.html#temporal.open_stds.open_old_stds>`
* raster maps registered in reference dataset (b4) are listed on line
  :lcode:`146` by :grasscmd2:`get_registered_maps
  <libpython/temporal.html#temporal.abstract_space_time_dataset.AbstractSpaceTimeDataset.get_registered_maps>`
* related raster maps in two other datasets (b8, cl) are searched on
  lines :lcode:`149-152` by :grasscmd2:`get_registered_maps
  <libpython/temporal.html#temporal.abstract_space_time_dataset.AbstractSpaceTimeDataset.get_registered_maps>`
  with ``where`` parameter

.. literalinclude:: ../_static/scripts/ndvi-tgrass-v1.py
   :language: python
   :linenos:
   :emphasize-lines: 19, 23, 27, 30, 33, 38, 138, 140-142, 146, 149-152

Sample script to download: `ndvi-tgrass-v1.py
<../_static/scripts/ndvi-tgrass-v1.py>`__
      
Example of usage:

.. code-block:: bash

   ndvi-tgrass.py b4=b4 b8=b8 mask=clouds basename=ndvi out=stats.txt

Possible output:

::

   --------------------------------------------------------------------------------
   NDVI class statistics (ndvi_1: 2019-04-07 10:20:21)
   --------------------------------------------------------------------------------
   NDVI class 1: 182.4 ha
   NDVI class 2: 4923.4 ha
   NDVI class 3: 6330.2 ha
   NDVI class 1: -0.2073 (min) 0.4915 (max) 0.0554 (mean)
   NDVI class 2: -0.2380 (min) 0.9989 (max) 0.3736 (mean)
   NDVI class 3: -0.4533 (min) 0.9988 (max) 0.6468 (mean)
   ...
   --------------------------------------------------------------------------------
   NDVI class statistics (ndvi_7: 2019-10-14 10:20:31)
   --------------------------------------------------------------------------------
   NDVI class 1: 163.4 ha
   NDVI class 2: 2669.2 ha
   NDVI class 3: 8603.6 ha
   NDVI class 1: -0.2253 (min) 0.7481 (max) 0.0457 (mean)
   NDVI class 2: -1.0000 (min) 0.9994 (max) 0.2999 (mean)
   NDVI class 3: -0.9978 (min) 0.9994 (max) 0.6992 (mean)
